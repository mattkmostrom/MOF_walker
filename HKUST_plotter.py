import matplotlib.pyplot as plt
import os
import numpy as np
import subprocess


def tail(f, n):
    proc = subprocess.Popen(['tail', '-n', str(n), f], stdout=subprocess.PIPE)
    lines = proc.stdout.readlines()
    return [line.decode('utf-8') for line in lines]  # Decode byte strings to regular strings


# put the runlog files into dictionary keys
root_dir = "jan_hkust_project_mar_25"
#root_dir = "LJ"
runlog_data = {}
data_name = []
data = []
for dirpath, dirnames, filenames in os.walk(root_dir):
    for filename in filenames:
        if filename == "runlog.log":
            filepath = os.path.join(dirpath, filename)
            dirpath_elements = filepath.split('/')  # root, molecule, temp, press
            data_name.append(str(dirpath_elements[1]) + "_" + str(dirpath_elements[2]) + "_" + str(dirpath_elements[3]))
            data.append(tail(filepath, 24))
for i in range(len(data_name)):
    runlog_data[data_name[i]] = data[i]


def value_extractor(filter_string1, runlog_data):
    filtered_runlog_data = {}
    extracted_floats_list = []
    for key, lines in runlog_data.items():
        filtered_lines = [line for line in lines if any(s in line for s in filter_string1)]
        if filtered_lines:
            filtered_runlog_data[key] = [word.split()[3] for word in filtered_lines]
            value = filtered_runlog_data[key][0]
            extracted_floats_list.append([key.split("_")[0], key.split("_")[1], float(key.split("_")[2]), float(value)])
    return extracted_floats_list

uptake_data = value_extractor(["OUTPUT: N = "], runlog_data)  # why does this break if you get rid of the []?
qst_data = value_extractor(["OUTPUT: qst = "], runlog_data)

structured_data = {}

for entry in uptake_data:
    molecule, temp, press, uptake = entry

    if molecule not in structured_data:
        structured_data[molecule] = {}
    if temp not in structured_data[molecule]:
        structured_data[molecule][temp] = {}
    if press not in structured_data[molecule][temp]:
        structured_data[molecule][temp][press] = {}

    structured_data[molecule][temp][press]['uptake'] = uptake * 1/9.67795

for entry in qst_data:
    molecule, temp, press, qst = entry

    if molecule not in structured_data:
        structured_data[molecule] = {}
    if temp not in structured_data[molecule]:
        structured_data[molecule][temp] = {}
    if press not in structured_data[molecule][temp]:
        structured_data[molecule][temp][press] = {}

    structured_data[molecule][temp][press]['qst'] = qst


def extract_data(press, data_type):
    data = []
    for temp in structured_data["ch4"]:
        if press in structured_data["ch4"][temp]:
            data.append(structured_data["ch4"][temp][press][data_type])
    return data

ch4_303k = structured_data["ch4"]["303k"]
ch4_318k = structured_data["ch4"]["318k"]
#ch4_333k = structured_data["ch4"]["333k"]

co2_307k = structured_data["co2"]["307k"]
co2_313k = structured_data["co2"]["313k"]
#co2_328k = structured_data["co2"]["328k"]
#co2_343k = structured_data["co2"]["343k"]
#co2_274k = structured_data["co2"]["274k"]

n2_303k = structured_data["n2"]["303k"]
n2_318k = structured_data["n2"]["318k"]
n2_333k = structured_data["n2"]["333k"]

h2_303k = structured_data["h2"]["303k"]
h2_318k = structured_data["h2"]["318k"]
h2_333k = structured_data["h2"]["333k"]


def plot_qst_vs_uptake(dict_data, molecules, temps, save_name=None, markers=None, colors=None):
    """
    Plot Qst vs Uptake for multiple molecule/temperature combinations.
    Parameters:
    - dict_data: The structured dictionary containing the data
    - molecules: List of molecules to include (e.g., ['ch4', 'n2'])
    - temps: List of temperatures to include (e.g., ['303k', '318k'])
    - save_name: Optional filename to save the plot
    - markers: Optional dictionary mapping molecules to marker styles
    - colors: Optional dictionary mapping temperatures to colors
    """
    plt.figure(figsize=(10, 6))

    # Default markers and colors if not provided
    if markers is None:
        markers = {'ch4': 'o', 'co2': 's', 'n2': 'v', 'h2': 'x'}

    if colors is None:
        colors = {'303k': 'blue', '318k': 'red', '333k': 'green',
                  '307k': 'purple', '313k': 'orange', '328k': 'brown',
                  '343k': 'pink', '274k': 'cyan'}

    # Plot each molecule-temperature combination
    for molecule in molecules:
        for temp in temps:
            if molecule in dict_data and temp in dict_data[molecule]:
                data = dict_data[molecule][temp]

                # Extract data
                pressures = list(data.keys())
                uptakes = [data[p]['uptake'] for p in pressures]
                qst_values = [data[p]['qst'] for p in pressures]

                # Sort by uptake for this plot
                sorted_indices = np.argsort(uptakes)
                uptakes = [uptakes[i] for i in sorted_indices]
                qst_values = [qst_values[i] for i in sorted_indices]

                # Plot with appropriate marker and color
                plt.plot(uptakes, qst_values,
                         marker=markers.get(molecule, 'o'),
                         color=colors.get(temp, 'black'),
                         linestyle='-',
                         label=f'{molecule.upper()} {temp}')
        if molecule == 'h2':
            H2_exp = [
                [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2,
                 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4, 4.5,
                 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8,
                 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1,
                 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11, 11.1,
                 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13,
                 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14],
                [6.864124519, 6.869566916, 6.87465085, 6.879384528, 6.883776157, 6.887833942, 6.891566091, 6.894980808,
                 6.898086302, 6.900890778, 6.903402442, 6.905629501, 6.907580161, 6.909262629, 6.91068511, 6.911855812,
                 6.91278294, 6.913474701, 6.913939302, 6.914184948, 6.914219846, 6.914052203, 6.913690224, 6.913142117,
                 6.912416086, 6.91152034, 6.910463084, 6.909252524, 6.907896867, 6.906404319, 6.904783087, 6.903041376,
                 6.901187394, 6.899229346, 6.89717544, 6.895033881, 6.892812875, 6.890520629, 6.88816535, 6.885755244,
                 6.883298516, 6.880803374, 6.878278024, 6.875730672, 6.873169524, 6.870602788, 6.868038668, 6.865485372,
                 6.862951106, 6.860444077, 6.85797249, 6.855544551, 6.853168469, 6.850852448, 6.848604694, 6.846433416,
                 6.844346818, 6.842353107, 6.84046049, 6.838677172, 6.837011361, 6.835471262, 6.834065082, 6.832801027,
                 6.831687304, 6.830732118, 6.829943677, 6.829330187, 6.828899854, 6.828660884, 6.828621483, 6.828789859,
                 6.829174217, 6.829782764, 6.830623706, 6.83170525, 6.833035601, 6.834622967, 6.836475553, 6.838601566,
                 6.841009212, 6.843706698, 6.84670223, 6.850004014, 6.853620256, 6.857559164, 6.861828943, 6.8664378,
                 6.871393941, 6.876705572, 6.8823809, 6.888428132, 6.894855472, 6.901671129, 6.908883308, 6.916500215,
                 6.924530058, 6.932981041, 6.941861372, 6.951179257, 6.960942903, 6.971160515, 6.9818403, 6.992990465,
                 7.004619215, 7.016734757, 7.029345298, 7.042459044, 7.056084201, 7.070228975, 7.084901573, 7.100110202,
                 7.115863067, 7.132168374, 7.149034332, 7.166469144, 7.184481019, 7.203078162, 7.22226878, 7.242061079,
                 7.262463266, 7.283483546, 7.305130126, 7.327411213, 7.350335012, 7.373909731, 7.398143575, 7.423044751,
                 7.448621465, 7.474881924, 7.501834334, 7.529486901, 7.557847832, 7.586925333, 7.61672761, 7.64726287,
                 7.678539319, 7.710565163, 7.74334861, 7.776897864]]
            #plt.errorbar(H2_exp[0], H2_exp[1], yerr=3, errorevery=100, marker='x', color='black', label='H2 Experiment',solid_capstyle='projecting', capsize=5)
            plt.scatter(H2_exp[0], H2_exp[1],  marker='x', color='black', label='H2 Experiment')
        elif molecule == 'n2':
            N2_exp = [
                [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2,
                 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4,
                 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6,
                 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8,
                 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8,
                 10.9, 11, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6,
                 12.7, 12.8, 12.9, 13, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14, 14.1, 14.2, 14.3, 14.4,
                 14.5, 14.6, 14.7, 14.8, 14.9, 15],
                [12.80628974, 12.77173851, 12.73777118, 12.70438771, 12.67158805, 12.63937213, 12.60773991, 12.57669134,
                 12.54622636, 12.51634492, 12.48704697, 12.45833245, 12.43020131, 12.4026535, 12.37568896, 12.34930765,
                 12.32350951, 12.29829448, 12.27366252, 12.24961358, 12.22614759, 12.20326451, 12.18096428, 12.15924685,
                 12.13811218, 12.11756019, 12.09759085, 12.0782041, 12.05939989, 12.04117816, 12.02353887, 12.00648195,
                 11.99000736, 11.97411504, 11.95880494, 11.94407702, 11.9299312, 11.91636745, 11.90338571, 11.89098593,
                 11.87916805, 11.86793202, 11.85727779, 11.84720531, 11.83771452, 11.82880537, 11.82047781, 11.81273178,
                 11.80556724, 11.79898412, 11.79298238, 11.78756197, 11.78272283, 11.7784649, 11.77478815, 11.7716925,
                 11.76917792, 11.76724434, 11.76589172, 11.76512, 11.76492913, 11.76531905, 11.76628972, 11.76784109,
                 11.76997308, 11.77268567, 11.77597879, 11.77985238, 11.78430641, 11.78934081, 11.79495553, 11.80115052,
                 11.80792573, 11.8152811, 11.82321658, 11.83173212, 11.84082767, 11.85050316, 11.86075856, 11.87159381,
                 11.88300884, 11.89500363, 11.90757809, 11.9207322, 11.93446589, 11.94877911, 11.96367181, 11.97914393,
                 11.99519542, 12.01182624, 12.02903632, 12.04682561, 12.06519407, 12.08414164, 12.10366826, 12.12377388,
                 12.14445846, 12.16572193, 12.18756425, 12.20998536, 12.23298521, 12.25656374, 12.28072091, 12.30545666,
                 12.33077094, 12.3566637, 12.38313487, 12.41018442, 12.43781229, 12.46601842, 12.49480276, 12.52416526,
                 12.55410587, 12.58462453, 12.61572119, 12.6473958, 12.67964831, 12.71247865, 12.74588679, 12.77987267,
                 12.81443623, 12.84957742, 12.88529619, 12.92159249, 12.95846626, 12.99591745, 13.03394601, 13.07255188,
                 13.11173501, 13.15149536, 13.19183286, 13.23274747, 13.27423913, 13.31630779, 13.35895339, 13.40217589,
                 13.44597522, 13.49035135, 13.53530421, 13.58083375, 13.62693992, 13.67362267, 13.72088194, 13.76871768,
                 13.81712984, 13.86611837, 13.91568321, 13.96582431, 14.01654162, 14.06783508]]
            #plt.errorbar(N2_exp[0], N2_exp[1], yerr=6.9, errorevery=100, marker='x', color='b', label='N2 Experiment',solid_capstyle='projecting', capsize=5)
            plt.scatter(N2_exp[0], N2_exp[1],  marker='x', color='b', label='N2 Experiment')
        elif molecule == 'co2':
            CO2_exp = [
                [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2,
                 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4, 4.5,
                 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8,
                 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1,
                 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11, 11.1,
                 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13,
                 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9,
                 15],
                [29.17808343, 29.15725018, 29.13657103, 29.11603223, 29.09562, 29.07532059, 29.05512024, 29.03500518,
                       29.01496165, 28.9949759, 28.97503415, 28.95512266, 28.93522765, 28.91533536, 28.89543204,
                       28.87550392, 28.85553723, 28.83551823, 28.81543314, 28.7952682, 28.77500966, 28.75464375,
                       28.73415671, 28.71353477, 28.69276418, 28.67183118, 28.65072199, 28.62942287, 28.60792005,
                       28.58619976, 28.56424825, 28.54205176, 28.51959651, 28.49686876, 28.47385473, 28.45054068,
                       28.42691282, 28.40295741, 28.37866069, 28.35400888, 28.32898823, 28.30358498, 28.27778537,
                       28.25157562, 28.22494199, 28.19787071, 28.17034802, 28.14236015, 28.11389335, 28.08493386,
                       28.0554679, 28.02548172, 27.99496157, 27.96389366, 27.93226426, 27.90005958, 27.86726588,
                       27.83386939, 27.79985634, 27.76521299, 27.72992555, 27.69398028, 27.65736341, 27.62006118,
                       27.58205983, 27.54334559, 27.50390471, 27.46372342, 27.42278796, 27.38108457, 27.33859949,
                       27.29531896, 27.25122921, 27.20631648, 27.16056701, 27.11396704, 27.06650281, 27.01816055,
                       26.96892651, 26.91878692, 26.86772802, 26.81573605, 26.76279725, 26.70889785, 26.65402409,
                       26.59816222, 26.54129847, 26.48341908, 26.42451028, 26.36455832, 26.30354943, 26.24146986,
                       26.17830583, 26.1140436, 26.04866939, 25.98216944, 25.91453, 25.8457373, 25.77577758, 25.70463708,
                       25.63230204, 25.55875869, 25.48399327, 25.40799202, 25.33074119, 25.252227, 25.1724357, 25.09135352,
                       25.00896671, 24.9252615, 24.84022412, 24.75384083, 24.66609785, 24.57698143, 24.4864778, 24.3945732,
                       24.30125386, 24.20650604, 24.11031596, 24.01266987, 23.913554, 23.81295459, 23.71085788, 23.60725011,
                       23.50211751, 23.39544633, 23.2872228, 23.17743316, 23.06606365, 22.9531005, 22.83852996, 22.72233827,
                       22.60451166, 22.48503637, 22.36389863, 22.2410847, 22.1165808, 21.99037317, 21.86244806, 21.73279169,
                       21.60139032, 21.46823017, 21.33329748, 21.1965785, 21.05805946, 20.91772661, 20.77556617,
                       20.63156438, 20.48570749, 20.33798174]]
            plt.scatter(CO2_exp[0], CO2_exp[1], marker='x', color='g', label='CO2 Experiment')
        elif molecule == 'ch4':
            CH4_exp = [
                [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2,
                 2.3,
                 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4, 4.5,
                 4.6,
                 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8,
                 6.9,
                 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1,
                 9.2,
                 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11, 11.1,
                 11.2,
                 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13,
                 13.1,
                 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9,
                 15, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7,
                 16.8],
                [20.68997146, 20.68653825, 20.68100575, 20.67340355, 20.66376124, 20.65210841, 20.63847466, 20.62288957,
                 20.60538273, 20.58598373, 20.56472216, 20.54162762, 20.5167297, 20.49005797, 20.46164205, 20.4315115,
                 20.39969594, 20.36622493, 20.33112809, 20.29443499, 20.25617523, 20.21637839, 20.17507407, 20.13229186,
                 20.08806135, 20.04241213, 19.99537378, 19.9469759, 19.89724809, 19.84621992, 19.793921, 19.7403809,
                 19.68562923, 19.62969556, 19.5726095, 19.51440063, 19.45509854, 19.39473283, 19.33333307, 19.27092888,
                 19.20754982, 19.1432255, 19.0779855, 19.01185942, 18.94487684, 18.87706736, 18.80846057, 18.73908605,
                 18.66897339, 18.5981522, 18.52665205, 18.45450254, 18.38173325, 18.30837379, 18.23445373, 18.16000267,
                 18.08505021, 18.00962592, 17.9337594, 17.85748024, 17.78081803, 17.70380236, 17.62646283, 17.54882901,
                 17.47093051, 17.39279691, 17.3144578, 17.23594278, 17.15728143, 17.07850334, 16.99963811, 16.92071532,
                 16.84176457, 16.76281544, 16.68389753, 16.60504042, 16.52627371, 16.44762699, 16.36912984, 16.29081186,
                 16.21270264, 16.13483177, 16.05722883, 15.97992342, 15.90294514, 15.82632356, 15.75008828, 15.67426889,
                 15.59889498, 15.52399614, 15.44960197, 15.37574204, 15.30244596, 15.22974331, 15.15766368, 15.08623666,
                 15.01549185, 14.94545883, 14.8761672, 14.80764653, 14.73992644, 14.6730365, 14.6070063, 14.54186544,
                 14.47764351, 14.41437009, 14.35207478, 14.29078716, 14.23053683, 14.17135339, 14.1132664, 14.05630548,
                 14.00050021, 13.94588017, 13.89247497, 13.84031418, 13.7894274, 13.73984423, 13.69159425, 13.64470704,
                 13.59921221, 13.55513934, 13.51251802, 13.47137785, 13.43174841, 13.39365929, 13.35714008, 13.32222038,
                 13.28892978, 13.25729785, 13.22735421, 13.19912843, 13.1726501, 13.14794882, 13.12505418, 13.10399576,
                 13.08480316, 13.06750597, 13.05213378, 13.03871617, 13.02728274, 13.01786308, 13.01048678, 13.00518344,
                 13.00198263, 13.00091395, 13.00200699, 13.00529134, 13.01079659, 13.01855234, 13.02858816, 13.04093366,
                 13.05561843, 13.07267204, 13.0921241, 13.11400419, 13.13834191, 13.16516684, 13.19450857, 13.2263967,
                 13.26086082, 13.29793051, 13.33763537, 13.38000499, 13.42506895, 13.47285685, 13.52339827, 13.57672282]]
            plt.errorbar(CH4_exp[0], CH4_exp[1], yerr=9, errorevery=20, marker='x', color='r', label='CH4 Experiment', solid_capstyle='projecting', capsize=5)

    plt.xlabel('Absolute Adsorbed (mmol/g)')
    plt.ylabel('Qst (kJ/mol)')
    #plt.title('Qst vs Uptake')
    plt.legend(loc='best',ncols=2)
    #plt.xlim(0, 14)
    #plt.ylim(0, 33)
    plt.tight_layout()

    if save_name:
        plt.savefig(f'{save_name}.png')
        plt.savefig(f'{save_name}.eps', format='eps')
        plt.savefig(f'{save_name}.svg', format='svg')

    plt.show()

# Example usage





def compare_single_molecule_uptake(dict_data, molecule, temps, data_type='uptake', save_name=None):

    H2_exp_uptake_303k = [[0.0,1.4,6.2,10.5,49.8,62.6,81.9,97.1,118.3,154.7,183.7,209.4,233.3,266.4,311.3,317.3,355.7,384.4,415.1,451.5,466.8,483.4],[0.0,0.1,0.5,0.8,3.2,3.9,4.9,5.6,6.6,8.1,9.2,10.1,11.0,11.9,13.0,13.2,14.2,15.0,15.7,16.4,16.8,17.0]]
    H2_exp_uptake_318k = [[0.0,3.1,6.5,22.3,54.0,101.9,148.8,186.6,214.4,239.8,275.3,306.0,340.9,377.0,407.1,411.8,431.4,442.0,494.6],[0.0,0.3,0.5,1.4,3.1,5.2,7.1,8.4,9.2,10.0,10.9,11.7,12.6,13.3,14.0,14.1,14.5,14.7,15.6]]
    H2_exp_uptake_333k = [[0.0,1.7,3.8,9.8,21.7,24.7,42.4,47.7,62.1,70.9,81.1,102.2,153.5,197.8,249.9,255.2,337.4,372.2,404.8,416.6,445.0,488.1],[0.0,0.1,0.2,0.5,1.2,1.3,2.2,2.5,3.2,3.5,4.0,4.8,6.7,8.1,9.6,9.7,11.4,12.1,12.8,13.0,13.5,14.2]]

    N2_exp_uptake_303k = [[0.0,1.2,2.5,3.0,9.8,10.5,19.5,29.6,38.6,48.9,49.9,59.8,68.7,79.1,83.8,96.9,130.5,177.2,182.5,206.1,246.3,289.5,336.8,384.1,405.3,453.2,484.6],[0.0,0.4,0.7,0.9,2.4,2.6,4.1,5.4,6.3,7.2,7.3,7.9,8.4,9.0,9.2,9.9,11.1,12.4,12.5,13.1,13.9,14.6,15.2,15.8,16.1,16.6,16.9]]
    N2_exp_uptake_318k = [[0.0,2.0,4.5,9.9,11.0,19.7,29.6,39.2,49.3,49.3,58.8,69.0,79.1,98.1,148.2,193.1,244.0,277.1,293.0,340.3,378.2,423.7,488.7,501.7],[0.0,0.5,1.0,2.0,2.3,3.5,4.7,5.6,6.4,6.5,7.1,7.7,8.2,9.2,10.9,12.0,13.1,13.7,13.9,14.6,15.1,15.7,16.3,16.4]]
    N2_exp_uptake_333k = [[0.0,1.6,4.8,8.4,9.9,19.6,29.5,36.1,39.3,49.0,57.6,69.0,71.8,78.5,94.4,99.2,99.5,109.0,113.9,150.6,183.1,222.7,255.2,258.7,305.1,339.7,380.5,427.8,454.4,481.0],[0.0,0.3,0.9,1.5,1.7,3.0,4.1,4.7,5.0,5.7,6.2,6.9,7.1,7.4,8.1,8.3,8.3,8.7,9.0,10.2,11.0,11.9,12.5,12.5,13.3,13.8,14.2,14.9,15.1,15.4]]

    CH4_exp_uptake_303k = [[0.0,1.5,3.5,5.0,9.8,10.7,15.8,19.8,22.3,29.8,39.2,49.5,58.9,68.4,80.2,88.8,99.8,116.4,139.5,147.7,180.3,197.5,246.3,343.9,398.3,432.5,459.1],[0.0,1.4,2.4,3.4,5.4,5.5,7.1,7.8,8.3,9.4,10.4,11.0,11.6,12.0,12.5,12.8,13.1,13.7,14.3,14.5,15.3,15.5,16.3,17.0,17.5,17.7,18.0]]
    CH4_exp_uptake_318k = [[0.0,0.5,1.3,4.5,9.8,19.5,29.5,39.4,49.1,58.9,69.6,79.3,92.4,101.0,121.7,138.3,148.6,195.1,216.7,230.6,284.5,291.2,332.6,367.5,403.0,435.5,485.2],[0.0,0.4,1.0,2.7,4.7,7.0,8.4,9.4,10.1,10.7,11.2,11.6,12.1,12.3,12.9,13.4,13.6,14.5,14.8,15.1,15.8,15.5,15.9,16.3,16.5,16.9,17.1]]
    CH4_exp_uptake_333k = [[0.0,1.5,1.9,4.8,6.8,9.9,14.6,19.6,29.8,39.4,49.3,59.2,69.0,78.8,90.3,99.8,102.1,119.3,139.5,148.3,199.3,245.7,289.5,321.4,340.9,346.2,388.2,471.0],[0.0,0.7,0.9,2.0,2.6,3.5,4.6,5.6,7.1,8.1,8.9,9.6,10.1,10.6,11.0,11.4,11.5,12.0,12.7,12.8,13.8,14.5,14.8,15.2,15.4,15.5,15.7,16.6]]

    CO2_exp_uptake_307k = [[0.0000,0.3731,0.8853,1.7853,2.8867,4.3198,9.4745,13.9452,17.0540,20.2517,27.9201,35.5884,39.2598,40.9474,47.3427,52.4352,52.8497,58.4160,60.8734,65.1961,71.5322,96.6395,98.2383,98.6232,100.6958,104.6632,105.4330,109.5485,113.1310,114.7002,119.0821,124.3523,126.2768,132.3168,135.8105,144.0710,156.2102,169.5928,170.9844,190.7031,193.7823,218.8008,237.3945,256.5210,283.9674],[]]
    CO2_exp_uptake_313k = [[0.0000,3.7010,6.9282,9.8890,14.5670,19.0081,24.7520,29.4300,38.0163,43.3161,50.5995,58.3864,71.0585,126.4248,138.8601,163.1384,180.6069,193.9304,216.1361,203.9970,224.1302,242.4870,253.4418,270.9104,282.7534,287.1946],[]]


    plt.figure(figsize=(10, 6))

    for temp in temps:
        data = dict_data[molecule][temp]
        pressures = list(data.keys())
        values = [data[p][data_type] for p in pressures]

        # Sort by pressure
        sorted_indices = np.argsort(pressures)
        pressures = [pressures[i] for i in sorted_indices]
        values = [values[i] for i in sorted_indices]

        plt.plot(pressures, values, '-o', label=f'{molecule.upper()} {temp}')

        if molecule == 'h2':
            if temp == '303k':
                plt.scatter(H2_exp_uptake_303k[0], H2_exp_uptake_303k[1], marker='x', color='black', label='303K Exp')
            elif temp == '318k':
                plt.scatter(H2_exp_uptake_318k[0], H2_exp_uptake_318k[1], marker='s', color='black', label='313K Exp')
            elif temp == '333k':
                plt.scatter(H2_exp_uptake_333k[0], H2_exp_uptake_333k[1], marker='v', color='black', label='333K Exp')

        if molecule == 'n2':
            if temp == '303k':
                plt.scatter(N2_exp_uptake_303k[0], N2_exp_uptake_303k[1], marker='x', color='black', label='303K Exp')
            elif temp == '318k':
                plt.scatter(N2_exp_uptake_318k[0], N2_exp_uptake_318k[1], marker='s', color='black', label='313K Exp')
            elif temp == '333k':
                plt.scatter(N2_exp_uptake_333k[0], N2_exp_uptake_333k[1], marker='v', color='black', label='333K Exp')

        if molecule == 'ch4':
            if temp == '303k':
                plt.scatter(CH4_exp_uptake_303k[0], CH4_exp_uptake_303k[1], marker='x', color='black', label='303K Exp')
            elif temp == '318k':
                plt.scatter(CH4_exp_uptake_318k[0], CH4_exp_uptake_318k[1], marker='s', color='black', label='313K Exp')
            elif temp == '333k':
                plt.scatter(CH4_exp_uptake_333k[0], CH4_exp_uptake_333k[1], marker='v', color='black', label='333K Exp')

        if molecule == 'co2':
            if temp == '307k':
                plt.scatter(CH4_exp_uptake_303k[0], CH4_exp_uptake_303k[1], marker='x', color='black', label='303K Exp')
            elif temp == '313k':
                plt.scatter(CH4_exp_uptake_318k[0], CH4_exp_uptake_318k[1], marker='s', color='black', label='313K Exp')

    plt.xlabel('Pressure (atm)')
    plt.ylabel(f'{"Absolute Adsorbed (mmol/g)" if data_type == "uptake" else "Qst (kJ/mol)"}')
    plt.title(f'{molecule.upper()} Uptake')
    plt.legend()
    plt.tight_layout()

    if save_name:
        plt.savefig(f'{save_name}.png')

    plt.show()


plot_qst_vs_uptake(structured_data, ['ch4', 'n2', 'h2'], ['303k', '318k', '333k'],save_name='qst_vs_uptake_comparison')
#plot_qst_vs_uptake(structured_data, ['ch4'], ['303k', '318k', '333k'],save_name='ch4_qst_vs_uptake_comparison')
#plot_qst_vs_uptake(structured_data, ['n2'], ['303k', '318k', '333k'],save_name='n2_qst_vs_uptake_comparison')
#plot_qst_vs_uptake(structured_data, ['h2'], ['303k', '318k', '333k'],save_name='h2_qst_vs_uptake_comparison')
plot_qst_vs_uptake(structured_data, ['co2'], ['307k', '313k'],save_name='co2_qst_vs_uptake_comparison')



#compare_single_molecule_uptake(structured_data, 'h2', ['303k','318k','333k'], 'uptake', 'uptake_comparison_H2')
#compare_single_molecule_uptake(structured_data, 'n2', ['303k','318k','333k'], 'uptake', 'uptake_comparison_N2')
#compare_single_molecule_uptake(structured_data, 'ch4', ['303k','318k','333k'], 'uptake', 'uptake_comparison_CH4')
compare_single_molecule_uptake(structured_data, 'ch4', ['303k','318k'], 'uptake', 'uptake_comparison_CH4')
compare_single_molecule_uptake(structured_data, 'co2', ['307k','313k'], 'uptake', 'uptake_comparison_CO2')